import requests
import psycopg2
from psycopg2 import sql
from datetime import datetime
import pytz

# Function to convert UTC time to Central Time
def convert_to_central_time(utc_time_str):
    utc_time = datetime.strptime(utc_time_str, '%Y-%m-%dT%H:%M:%SZ')
    utc_zone = pytz.utc
    utc_time = utc_zone.localize(utc_time)
    central_zone = pytz.timezone('US/Central')
    central_time = utc_time.astimezone(central_zone)
    return central_time

# Function to check and create columns if they do not exist in the table
def ensure_columns_exist(cur, table_name, columns):
    # Get existing columns in the table
    cur.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}';")
    existing_columns = [row[0] for row in cur.fetchall()]

    for column_name, column_type in columns.items():
        if column_name not in existing_columns:
            # Create new column if it does not exist
            alter_query = sql.SQL("ALTER TABLE {table} ADD COLUMN {column} {data_type}")
            cur.execute(alter_query.format(
                table=sql.Identifier(table_name),
                column=sql.Identifier(column_name),
                data_type=sql.SQL(column_type)
            ))
            print(f"Column '{column_name}' added to table '{table_name}'.")

# Function to load data for one row per game per bookmaker, with UPSERT (insert or update)
def load_data_per_bookmaker(data, conn, cur):
    for game in data:
        game_id = game['id']  # Extract the unique game ID
        home_team = game['home_team']
        away_team = game['away_team']
        commence_time_utc = game['commence_time']

        # Convert commence_time from UTC to Central Time
        commence_time_central = convert_to_central_time(commence_time_utc)

        # Loop through each bookmaker for the game
        for bookmaker in game['bookmakers']:
            bookmaker_name = bookmaker['title']

            # Initialize variables to hold the extracted data for this bookmaker
            h2h_home_price, h2h_away_price = None, None
            spread_home, spread_home_price = None, None
            spread_away, spread_away_price = None, None
            total_over, total_over_price = None, None
            total_under, total_under_price = None, None

            # Extract market data for h2h, spreads, and totals
            for market in bookmaker['markets']:
                if market['key'] == 'h2h':
                    for outcome in market['outcomes']:
                        if outcome['name'] == home_team:
                            h2h_home_price = outcome['price']
                        elif outcome['name'] == away_team:
                            h2h_away_price = outcome['price']

                elif market['key'] == 'spreads':
                    for outcome in market['outcomes']:
                        if outcome['name'] == home_team:
                            spread_home = outcome['point']
                            spread_home_price = outcome['price']
                        elif outcome['name'] == away_team:
                            spread_away = outcome['point']
                            spread_away_price = outcome['price']

                elif market['key'] == 'totals':
                    for outcome in market['outcomes']:
                        if outcome['name'] == 'Over':
                            total_over = outcome['point']
                            total_over_price = outcome['price']
                        elif outcome['name'] == 'Under':
                            total_under = outcome['point']
                            total_under_price = outcome['price']

            # Insert or update the row based on game_id and bookmaker
            upsert_query = sql.SQL("""
                INSERT INTO betting_line_staging (
                    game_id, home_team, away_team, commence_time, bookmaker, 
                    h2h_home_price, h2h_away_price, 
                    spread_home, spread_home_price, 
                    spread_away, spread_away_price, 
                    total_over, total_over_price, 
                    total_under, total_under_price
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (game_id, bookmaker) 
                DO UPDATE SET 
                    h2h_home_price = EXCLUDED.h2h_home_price,
                    h2h_away_price = EXCLUDED.h2h_away_price,
                    spread_home = EXCLUDED.spread_home,
                    spread_home_price = EXCLUDED.spread_home_price,
                    spread_away = EXCLUDED.spread_away,
                    spread_away_price = EXCLUDED.spread_away_price,
                    total_over = EXCLUDED.total_over,
                    total_over_price = EXCLUDED.total_over_price,
                    total_under = EXCLUDED.total_under,
                    total_under_price = EXCLUDED.total_under_price;
            """)
            cur.execute(upsert_query, (game_id, home_team, away_team, commence_time_central, bookmaker_name,
                                       h2h_home_price, h2h_away_price,
                                       spread_home, spread_home_price,
                                       spread_away, spread_away_price,
                                       total_over, total_over_price,
                                       total_under, total_under_price))
            conn.commit()

# Main function to fetch data from the API and insert data into PostgreSQL
def main():
    # API URL
    url = 'https://api.the-odds-api.com/v4/sports/americanfootball_nfl/odds/?apiKey=891af65657a67d62343a80a89f57ca5d&regions=us&markets=h2h,spreads,totals&oddsFormat=american'
    
    # Fetch the data from the API
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Failed to fetch data from API. Status code: {response.status_code}")
        return

    # Parse the JSON response
    data = response.json()

    # PostgreSQL connection details
    conn = psycopg2.connect(
        host="localhost",
        database="NFL_Betting_Model",
        user="postgres",
        password="Football1!",
        port="5432"
    )
    cur = conn.cursor()

    # Ensure that all required columns exist in the table
    columns_to_check = {
        "game_id": "VARCHAR(100)",
        "home_team": "VARCHAR(100)",
        "away_team": "VARCHAR(100)",
        "commence_time": "TIMESTAMP",
        "bookmaker": "VARCHAR(100)",
        "h2h_home_price": "NUMERIC",
        "h2h_away_price": "NUMERIC",
        "spread_home": "NUMERIC",
        "spread_home_price": "NUMERIC",
        "spread_away": "NUMERIC",
        "spread_away_price": "NUMERIC",
        "total_over": "NUMERIC",
        "total_over_price": "NUMERIC",
        "total_under": "NUMERIC",
        "total_under_price": "NUMERIC"
    }
    ensure_columns_exist(cur, "betting_line_staging", columns_to_check)

    # Load data into the table, one row per bookmaker per game
    load_data_per_bookmaker(data, conn, cur)

    # Close the database connection
    cur.close()
    conn.close()
    print("Data loading completed successfully.")

if __name__ == '__main__':
    main()
