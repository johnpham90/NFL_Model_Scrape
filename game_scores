import requests
import psycopg2

# Your API key
api_key = '604a48fab9784f9fb2d6101874bec4bb'

# Define the range of years and weeks to fetch
years = [2024]  # Adjust this range as needed
weeks = range(6, 8)  # Regular NFL season has 17 weeks

# Connect to your PostgreSQL database
conn = psycopg2.connect(
    dbname="NFL_Betting_Model",
    user="postgres",
    password="Football1!",
    host="localhost",
    port="5432"
)
cursor = conn.cursor()

# The name of the table where the data will be inserted
table_name = 'game_scores'

# Step 1: Inspect JSON structure and dynamically handle columns
def add_columns_if_not_exist(cursor, table_name, json_data):
    for record in json_data:
        for key, value in record.items():
            # Determine the data type for each JSON field (assume text as default)
            if isinstance(value, int):
                column_type = 'INTEGER'
            elif isinstance(value, float):
                column_type = 'FLOAT'
            elif isinstance(value, bool):
                column_type = 'BOOLEAN'
            else:
                column_type = 'TEXT'
            
            # Check if the column exists in the table (updated logic to handle case sensitivity)
            cursor.execute(f"""
                SELECT EXISTS (
                    SELECT 1
                    FROM information_schema.columns 
                    WHERE table_name = '{table_name}' 
                    AND column_name = '{key.lower()}'
                );
            """)
            result = cursor.fetchone()

            # If the column does not exist, add it to the table
            if result[0] is False:
                alter_table_query = f"ALTER TABLE {table_name} ADD COLUMN {key} {column_type};"
                cursor.execute(alter_table_query)
                print(f"Added column {key} of type {column_type} to {table_name}")

# Step 2: Check if a game already exists in the table
def game_exists(cursor, table_name, stagingid):
    cursor.execute(f"SELECT 1 FROM {table_name} WHERE gameid = %s", (stagingid,))
    return cursor.fetchone() is not None

# Step 3: Insert the data into the table
def insert_or_update_data(cursor, table_name, record):
    # Cast boolean values to integers for the 'isgameover' field
    for key, value in record.items():
        if isinstance(value, bool):
            record[key] = int(value)  # Convert boolean to integer (True -> 1, False -> 0)

    # Check if the game already exists in the table
    game_id = record.get('GameID')
    if game_exists(cursor, table_name, game_id):
        # Construct the update query
        update_query = f"UPDATE {table_name} SET "
        update_query += ', '.join([f"{key} = %s" for key in record.keys()])
        update_query += " WHERE gameid = %s"
        
        try:
            # Execute the update query
            cursor.execute(update_query, list(record.values()) + [game_id])
            print(f"Updated data for game {game_id} in {table_name}")
        except Exception as e:
            print(f"Error updating data: {e}")
            conn.rollback()  # Rollback transaction if there's an error
    else:
        # Create an insert query with dynamic columns
        columns = ', '.join(record.keys())
        values = ', '.join(['%s'] * len(record))  # Placeholder for values
        insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({values})"
        
        try:
            # Execute the insert query
            cursor.execute(insert_query, list(record.values()))
            print(f"Inserted data into {table_name} for game {game_id}")
        except Exception as e:
            print(f"Error inserting data: {e}")
            conn.rollback()  # Rollback transaction if there's an error
# Step 4: Fetch data for each year and week
for year in years:
    for week in weeks:
        try:
            # Construct the dynamic API URL
            url = f'https://api.sportsdata.io/v3/nfl/scores/json/ScoresBasicFinal/{year}REF/{week}?key={api_key}'

            # url = f'https://api.sportsdata.io/v3/nfl/scores/json/ScoresBasicFinal/2024REF/6?key=604a48fab9784f9fb2d6101874bec4bb'

            # link to api page https://sportsdata.io/developers/api-documentation/nfl#scores-game-state
            # ensure that API has the following fields:
                # season - int4
                # sesontype - int4
                # week - int4
                # hometeam - text
                # awayteam - test
                # date

    
            # Print the URL to verify it's constructed correctly
            print(f"Fetching data from: {url}")
            
            # Fetch the data from the API
            response = requests.get(url)
            if response.status_code == 200:
                json_data = response.json()
                print(f"Successfully retrieved data for year {year}, week {week}")
                
                # Add columns dynamically if they don't exist
                add_columns_if_not_exist(cursor, table_name, json_data)
                
                # Insert data into the database for each record
                for record in json_data:
                    insert_or_update_data(cursor, table_name, record)
                
                # Commit after processing each week
                conn.commit()
            else:
                print(f"Failed to retrieve data for year {year}, week {week}, status code: {response.status_code}")
        except Exception as e:
            print(f"Error occurred for year {year}, week {week}: {e}")
            continue  # Continue to the next week even if there's an error

# Close the connection
cursor.close()
conn.close()

print("All data processed and inserted")
